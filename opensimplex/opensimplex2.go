package opensimplex

import (
	"math"
)

// Based on KdotJPG's Java implementation of Simplex:
// https://github.com/KdotJPG/OpenSimplex2

const (
	PrimeX                 int64   = 0x5205402B9270C86F
	PrimeY                 int64   = 0x598CD327003817B5
	PrimeZ                 int64   = 0x5BCC226E9FA0BACB
	PrimeW                 int64   = 0x56CC5227E58F554B
	HashMultiplier         int64   = 0x53A3F72DEEC546F5
	SeedFlip3d             int64   = -0x52D547B2E96ED629
	SeedOffset4d           int64   = 0xE83DC3E0DA7164D
	ROOT2OVER2             float64 = 0.7071067811865476
	Skew2d                 float64 = 0.366025403784439
	Unskew2d               float64 = -0.21132486540518713
	ROOT3OVER3             float64 = 0.5773502691896257
	FallbackRotate3d               = 2.0 / 3.0
	Rotate3dOrthogonalizer         = Unskew2d
	Skew4d                 float64 = -0.138196601125011
	Unskew4d               float64 = 0.309016994374947
	LatticeStep4d          float64 = 0.2
	NGrads2dExponent       int32   = 7
	NGrads3dExponent       int32   = 8
	NGrads4dExponent       int32   = 9
	NGrads2d                       = 1 << NGrads2dExponent
	NGrads3d                       = 1 << NGrads3dExponent
	NGrads4d                       = 1 << NGrads4dExponent
	Normalizer2d           float64 = 0.01001634121365712
	Normalizer3d           float64 = 0.07969837668935331
	Normalizer4d           float64 = 0.0220065933241897
	Rsquared2d             float64 = 0.5
	Rsquared3d             float64 = 0.6
	Rsquared4d             float64 = 0.6
)

type Simplex struct {
	seed        int64
	gradients2d [NGrads2d * 2]float64
	gradients3d [NGrads3d * 4]float64
	gradients4d [NGrads4d * 4]float64
	grads2      [48]float64
	grads3      [192]float64
	grads4      [640]float64
}

func (o Simplex) Init(seed int64) {
	o.seed = seed
	//o.gradients2d = make([]float64, NGrads2d*2)
	o.grads2 = [48]float64{
		0.38268343236509, 0.923879532511287,
		0.923879532511287, 0.38268343236509,
		0.923879532511287, -0.38268343236509,
		0.38268343236509, -0.923879532511287,
		-0.38268343236509, -0.923879532511287,
		-0.923879532511287, -0.38268343236509,
		-0.923879532511287, 0.38268343236509,
		-0.38268343236509, 0.923879532511287,
		0.130526192220052, 0.99144486137381,
		0.608761429008721, 0.793353340291235,
		0.793353340291235, 0.608761429008721,
		0.99144486137381, 0.130526192220051,
		0.99144486137381, -0.130526192220051,
		0.793353340291235, -0.60876142900872,
		0.608761429008721, -0.793353340291235,
		0.130526192220052, -0.99144486137381,
		-0.130526192220052, -0.99144486137381,
		-0.608761429008721, -0.793353340291235,
		-0.793353340291235, -0.608761429008721,
		-0.99144486137381, -0.130526192220052,
		-0.99144486137381, 0.130526192220051,
		-0.793353340291235, 0.608761429008721,
		-0.608761429008721, 0.793353340291235,
		-0.130526192220052, 0.99144486137381,
	}
	n2 := len(o.grads2)
	for i := 0; i < n2; i++ {
		o.grads2[i] /= Normalizer2d
	}
	for i := 0; i < len(o.gradients2d); i++ {
		o.gradients2d[i] = o.grads2[i%n2]
	}
	//o.gradients3d = make([]float64, NGrads3d*4)
	o.grads3 = [192]float64{
		2.22474487139, 2.22474487139, -1.0, 0.0,
		2.22474487139, 2.22474487139, 1.0, 0.0,
		3.0862664687972017, 1.1721513422464978, 0.0, 0.0,
		1.1721513422464978, 3.0862664687972017, 0.0, 0.0,
		-2.22474487139, 2.22474487139, -1.0, 0.0,
		-2.22474487139, 2.22474487139, 1.0, 0.0,
		-1.1721513422464978, 3.0862664687972017, 0.0, 0.0,
		-3.0862664687972017, 1.1721513422464978, 0.0, 0.0,
		-1.0, -2.22474487139, -2.22474487139, 0.0,
		1.0, -2.22474487139, -2.22474487139, 0.0,
		0.0, -3.0862664687972017, -1.1721513422464978, 0.0,
		0.0, -1.1721513422464978, -3.0862664687972017, 0.0,
		-1.0, -2.22474487139, 2.22474487139, 0.0,
		1.0, -2.22474487139, 2.22474487139, 0.0,
		0.0, -1.1721513422464978, 3.0862664687972017, 0.0,
		0.0, -3.0862664687972017, 1.1721513422464978, 0.0,
		-2.22474487139, -2.22474487139, -1.0, 0.0,
		-2.22474487139, -2.22474487139, 1.0, 0.0,
		-3.0862664687972017, -1.1721513422464978, 0.0, 0.0,
		-1.1721513422464978, -3.0862664687972017, 0.0, 0.0,
		-2.22474487139, -1.0, -2.22474487139, 0.0,
		-2.22474487139, 1.0, -2.22474487139, 0.0,
		-1.1721513422464978, 0.0, -3.0862664687972017, 0.0,
		-3.0862664687972017, 0.0, -1.1721513422464978, 0.0,
		-2.22474487139, -1.0, 2.22474487139, 0.0,
		-2.22474487139, 1.0, 2.22474487139, 0.0,
		-3.0862664687972017, 0.0, 1.1721513422464978, 0.0,
		-1.1721513422464978, 0.0, 3.0862664687972017, 0.0,
		-1.0, 2.22474487139, -2.22474487139, 0.0,
		1.0, 2.22474487139, -2.22474487139, 0.0,
		0.0, 1.1721513422464978, -3.0862664687972017, 0.0,
		0.0, 3.0862664687972017, -1.1721513422464978, 0.0,
		-1.0, 2.22474487139, 2.22474487139, 0.0,
		1.0, 2.22474487139, 2.22474487139, 0.0,
		0.0, 3.0862664687972017, 1.1721513422464978, 0.0,
		0.0, 1.1721513422464978, 3.0862664687972017, 0.0,
		2.22474487139, -2.22474487139, -1.0, 0.0,
		2.22474487139, -2.22474487139, 1.0, 0.0,
		1.1721513422464978, -3.0862664687972017, 0.0, 0.0,
		3.0862664687972017, -1.1721513422464978, 0.0, 0.0,
		2.22474487139, -1.0, -2.22474487139, 0.0,
		2.22474487139, 1.0, -2.22474487139, 0.0,
		3.0862664687972017, 0.0, -1.1721513422464978, 0.0,
		1.1721513422464978, 0.0, -3.0862664687972017, 0.0,
		2.22474487139, -1.0, 2.22474487139, 0.0,
		2.22474487139, 1.0, 2.22474487139, 0.0,
		1.1721513422464978, 0.0, 3.0862664687972017, 0.0,
		3.0862664687972017, 0.0, 1.1721513422464978, 0.0,
	}
	n3 := len(o.grads3)
	for i := 0; i < n3; i++ {
		o.grads3[i] /= Normalizer3d
	}
	for i := 0; i < len(o.gradients3d); i++ {
		o.gradients3d[i] = o.grads3[i%n3]
	}
	//o.gradients4d = make([]float64, NGrads4d*4)
	o.grads4 = [640]float64{
		-0.6740059517812944, -0.3239847771997537, -0.3239847771997537, 0.5794684678643381,
		-0.7504883828755602, -0.4004672082940195, 0.15296486218853164, 0.5029860367700724,
		-0.7504883828755602, 0.15296486218853164, -0.4004672082940195, 0.5029860367700724,
		-0.8828161875373585, 0.08164729285680945, 0.08164729285680945, 0.4553054119602712,
		-0.4553054119602712, -0.08164729285680945, -0.08164729285680945, 0.8828161875373585,
		-0.5029860367700724, -0.15296486218853164, 0.4004672082940195, 0.7504883828755602,
		-0.5029860367700724, 0.4004672082940195, -0.15296486218853164, 0.7504883828755602,
		-0.5794684678643381, 0.3239847771997537, 0.3239847771997537, 0.6740059517812944,
		-0.6740059517812944, -0.3239847771997537, 0.5794684678643381, -0.3239847771997537,
		-0.7504883828755602, -0.4004672082940195, 0.5029860367700724, 0.15296486218853164,
		-0.7504883828755602, 0.15296486218853164, 0.5029860367700724, -0.4004672082940195,
		-0.8828161875373585, 0.08164729285680945, 0.4553054119602712, 0.08164729285680945,
		-0.4553054119602712, -0.08164729285680945, 0.8828161875373585, -0.08164729285680945,
		-0.5029860367700724, -0.15296486218853164, 0.7504883828755602, 0.4004672082940195,
		-0.5029860367700724, 0.4004672082940195, 0.7504883828755602, -0.15296486218853164,
		-0.5794684678643381, 0.3239847771997537, 0.6740059517812944, 0.3239847771997537,
		-0.6740059517812944, 0.5794684678643381, -0.3239847771997537, -0.3239847771997537,
		-0.7504883828755602, 0.5029860367700724, -0.4004672082940195, 0.15296486218853164,
		-0.7504883828755602, 0.5029860367700724, 0.15296486218853164, -0.4004672082940195,
		-0.8828161875373585, 0.4553054119602712, 0.08164729285680945, 0.08164729285680945,
		-0.4553054119602712, 0.8828161875373585, -0.08164729285680945, -0.08164729285680945,
		-0.5029860367700724, 0.7504883828755602, -0.15296486218853164, 0.4004672082940195,
		-0.5029860367700724, 0.7504883828755602, 0.4004672082940195, -0.15296486218853164,
		-0.5794684678643381, 0.6740059517812944, 0.3239847771997537, 0.3239847771997537,
		0.5794684678643381, -0.6740059517812944, -0.3239847771997537, -0.3239847771997537,
		0.5029860367700724, -0.7504883828755602, -0.4004672082940195, 0.15296486218853164,
		0.5029860367700724, -0.7504883828755602, 0.15296486218853164, -0.4004672082940195,
		0.4553054119602712, -0.8828161875373585, 0.08164729285680945, 0.08164729285680945,
		0.8828161875373585, -0.4553054119602712, -0.08164729285680945, -0.08164729285680945,
		0.7504883828755602, -0.5029860367700724, -0.15296486218853164, 0.4004672082940195,
		0.7504883828755602, -0.5029860367700724, 0.4004672082940195, -0.15296486218853164,
		0.6740059517812944, -0.5794684678643381, 0.3239847771997537, 0.3239847771997537,
		-0.753341017856078, -0.37968289875261624, -0.37968289875261624, -0.37968289875261624,
		-0.7821684431180708, -0.4321472685365301, -0.4321472685365301, 0.12128480194602098,
		-0.7821684431180708, -0.4321472685365301, 0.12128480194602098, -0.4321472685365301,
		-0.7821684431180708, 0.12128480194602098, -0.4321472685365301, -0.4321472685365301,
		-0.8586508742123365, -0.508629699630796, 0.044802370851755174, 0.044802370851755174,
		-0.8586508742123365, 0.044802370851755174, -0.508629699630796, 0.044802370851755174,
		-0.8586508742123365, 0.044802370851755174, 0.044802370851755174, -0.508629699630796,
		-0.9982828964265062, -0.03381941603233842, -0.03381941603233842, -0.03381941603233842,
		-0.37968289875261624, -0.753341017856078, -0.37968289875261624, -0.37968289875261624,
		-0.4321472685365301, -0.7821684431180708, -0.4321472685365301, 0.12128480194602098,
		-0.4321472685365301, -0.7821684431180708, 0.12128480194602098, -0.4321472685365301,
		0.12128480194602098, -0.7821684431180708, -0.4321472685365301, -0.4321472685365301,
		-0.508629699630796, -0.8586508742123365, 0.044802370851755174, 0.044802370851755174,
		0.044802370851755174, -0.8586508742123365, -0.508629699630796, 0.044802370851755174,
		0.044802370851755174, -0.8586508742123365, 0.044802370851755174, -0.508629699630796,
		-0.03381941603233842, -0.9982828964265062, -0.03381941603233842, -0.03381941603233842,
		-0.37968289875261624, -0.37968289875261624, -0.753341017856078, -0.37968289875261624,
		-0.4321472685365301, -0.4321472685365301, -0.7821684431180708, 0.12128480194602098,
		-0.4321472685365301, 0.12128480194602098, -0.7821684431180708, -0.4321472685365301,
		0.12128480194602098, -0.4321472685365301, -0.7821684431180708, -0.4321472685365301,
		-0.508629699630796, 0.044802370851755174, -0.8586508742123365, 0.044802370851755174,
		0.044802370851755174, -0.508629699630796, -0.8586508742123365, 0.044802370851755174,
		0.044802370851755174, 0.044802370851755174, -0.8586508742123365, -0.508629699630796,
		-0.03381941603233842, -0.03381941603233842, -0.9982828964265062, -0.03381941603233842,
		-0.37968289875261624, -0.37968289875261624, -0.37968289875261624, -0.753341017856078,
		-0.4321472685365301, -0.4321472685365301, 0.12128480194602098, -0.7821684431180708,
		-0.4321472685365301, 0.12128480194602098, -0.4321472685365301, -0.7821684431180708,
		0.12128480194602098, -0.4321472685365301, -0.4321472685365301, -0.7821684431180708,
		-0.508629699630796, 0.044802370851755174, 0.044802370851755174, -0.8586508742123365,
		0.044802370851755174, -0.508629699630796, 0.044802370851755174, -0.8586508742123365,
		0.044802370851755174, 0.044802370851755174, -0.508629699630796, -0.8586508742123365,
		-0.03381941603233842, -0.03381941603233842, -0.03381941603233842, -0.9982828964265062,
		-0.3239847771997537, -0.6740059517812944, -0.3239847771997537, 0.5794684678643381,
		-0.4004672082940195, -0.7504883828755602, 0.15296486218853164, 0.5029860367700724,
		0.15296486218853164, -0.7504883828755602, -0.4004672082940195, 0.5029860367700724,
		0.08164729285680945, -0.8828161875373585, 0.08164729285680945, 0.4553054119602712,
		-0.08164729285680945, -0.4553054119602712, -0.08164729285680945, 0.8828161875373585,
		-0.15296486218853164, -0.5029860367700724, 0.4004672082940195, 0.7504883828755602,
		0.4004672082940195, -0.5029860367700724, -0.15296486218853164, 0.7504883828755602,
		0.3239847771997537, -0.5794684678643381, 0.3239847771997537, 0.6740059517812944,
		-0.3239847771997537, -0.3239847771997537, -0.6740059517812944, 0.5794684678643381,
		-0.4004672082940195, 0.15296486218853164, -0.7504883828755602, 0.5029860367700724,
		0.15296486218853164, -0.4004672082940195, -0.7504883828755602, 0.5029860367700724,
		0.08164729285680945, 0.08164729285680945, -0.8828161875373585, 0.4553054119602712,
		-0.08164729285680945, -0.08164729285680945, -0.4553054119602712, 0.8828161875373585,
		-0.15296486218853164, 0.4004672082940195, -0.5029860367700724, 0.7504883828755602,
		0.4004672082940195, -0.15296486218853164, -0.5029860367700724, 0.7504883828755602,
		0.3239847771997537, 0.3239847771997537, -0.5794684678643381, 0.6740059517812944,
		-0.3239847771997537, -0.6740059517812944, 0.5794684678643381, -0.3239847771997537,
		-0.4004672082940195, -0.7504883828755602, 0.5029860367700724, 0.15296486218853164,
		0.15296486218853164, -0.7504883828755602, 0.5029860367700724, -0.4004672082940195,
		0.08164729285680945, -0.8828161875373585, 0.4553054119602712, 0.08164729285680945,
		-0.08164729285680945, -0.4553054119602712, 0.8828161875373585, -0.08164729285680945,
		-0.15296486218853164, -0.5029860367700724, 0.7504883828755602, 0.4004672082940195,
		0.4004672082940195, -0.5029860367700724, 0.7504883828755602, -0.15296486218853164,
		0.3239847771997537, -0.5794684678643381, 0.6740059517812944, 0.3239847771997537,
		-0.3239847771997537, -0.3239847771997537, 0.5794684678643381, -0.6740059517812944,
		-0.4004672082940195, 0.15296486218853164, 0.5029860367700724, -0.7504883828755602,
		0.15296486218853164, -0.4004672082940195, 0.5029860367700724, -0.7504883828755602,
		0.08164729285680945, 0.08164729285680945, 0.4553054119602712, -0.8828161875373585,
		-0.08164729285680945, -0.08164729285680945, 0.8828161875373585, -0.4553054119602712,
		-0.15296486218853164, 0.4004672082940195, 0.7504883828755602, -0.5029860367700724,
		0.4004672082940195, -0.15296486218853164, 0.7504883828755602, -0.5029860367700724,
		0.3239847771997537, 0.3239847771997537, 0.6740059517812944, -0.5794684678643381,
		-0.3239847771997537, 0.5794684678643381, -0.6740059517812944, -0.3239847771997537,
		-0.4004672082940195, 0.5029860367700724, -0.7504883828755602, 0.15296486218853164,
		0.15296486218853164, 0.5029860367700724, -0.7504883828755602, -0.4004672082940195,
		0.08164729285680945, 0.4553054119602712, -0.8828161875373585, 0.08164729285680945,
		-0.08164729285680945, 0.8828161875373585, -0.4553054119602712, -0.08164729285680945,
		-0.15296486218853164, 0.7504883828755602, -0.5029860367700724, 0.4004672082940195,
		0.4004672082940195, 0.7504883828755602, -0.5029860367700724, -0.15296486218853164,
		0.3239847771997537, 0.6740059517812944, -0.5794684678643381, 0.3239847771997537,
		-0.3239847771997537, 0.5794684678643381, -0.3239847771997537, -0.6740059517812944,
		-0.4004672082940195, 0.5029860367700724, 0.15296486218853164, -0.7504883828755602,
		0.15296486218853164, 0.5029860367700724, -0.4004672082940195, -0.7504883828755602,
		0.08164729285680945, 0.4553054119602712, 0.08164729285680945, -0.8828161875373585,
		-0.08164729285680945, 0.8828161875373585, -0.08164729285680945, -0.4553054119602712,
		-0.15296486218853164, 0.7504883828755602, 0.4004672082940195, -0.5029860367700724,
		0.4004672082940195, 0.7504883828755602, -0.15296486218853164, -0.5029860367700724,
		0.3239847771997537, 0.6740059517812944, 0.3239847771997537, -0.5794684678643381,
		0.5794684678643381, -0.3239847771997537, -0.6740059517812944, -0.3239847771997537,
		0.5029860367700724, -0.4004672082940195, -0.7504883828755602, 0.15296486218853164,
		0.5029860367700724, 0.15296486218853164, -0.7504883828755602, -0.4004672082940195,
		0.4553054119602712, 0.08164729285680945, -0.8828161875373585, 0.08164729285680945,
		0.8828161875373585, -0.08164729285680945, -0.4553054119602712, -0.08164729285680945,
		0.7504883828755602, -0.15296486218853164, -0.5029860367700724, 0.4004672082940195,
		0.7504883828755602, 0.4004672082940195, -0.5029860367700724, -0.15296486218853164,
		0.6740059517812944, 0.3239847771997537, -0.5794684678643381, 0.3239847771997537,
		0.5794684678643381, -0.3239847771997537, -0.3239847771997537, -0.6740059517812944,
		0.5029860367700724, -0.4004672082940195, 0.15296486218853164, -0.7504883828755602,
		0.5029860367700724, 0.15296486218853164, -0.4004672082940195, -0.7504883828755602,
		0.4553054119602712, 0.08164729285680945, 0.08164729285680945, -0.8828161875373585,
		0.8828161875373585, -0.08164729285680945, -0.08164729285680945, -0.4553054119602712,
		0.7504883828755602, -0.15296486218853164, 0.4004672082940195, -0.5029860367700724,
		0.7504883828755602, 0.4004672082940195, -0.15296486218853164, -0.5029860367700724,
		0.6740059517812944, 0.3239847771997537, 0.3239847771997537, -0.5794684678643381,
		0.03381941603233842, 0.03381941603233842, 0.03381941603233842, 0.9982828964265062,
		-0.044802370851755174, -0.044802370851755174, 0.508629699630796, 0.8586508742123365,
		-0.044802370851755174, 0.508629699630796, -0.044802370851755174, 0.8586508742123365,
		-0.12128480194602098, 0.4321472685365301, 0.4321472685365301, 0.7821684431180708,
		0.508629699630796, -0.044802370851755174, -0.044802370851755174, 0.8586508742123365,
		0.4321472685365301, -0.12128480194602098, 0.4321472685365301, 0.7821684431180708,
		0.4321472685365301, 0.4321472685365301, -0.12128480194602098, 0.7821684431180708,
		0.37968289875261624, 0.37968289875261624, 0.37968289875261624, 0.753341017856078,
		0.03381941603233842, 0.03381941603233842, 0.9982828964265062, 0.03381941603233842,
		-0.044802370851755174, 0.044802370851755174, 0.8586508742123365, 0.508629699630796,
		-0.044802370851755174, 0.508629699630796, 0.8586508742123365, -0.044802370851755174,
		-0.12128480194602098, 0.4321472685365301, 0.7821684431180708, 0.4321472685365301,
		0.508629699630796, -0.044802370851755174, 0.8586508742123365, -0.044802370851755174,
		0.4321472685365301, -0.12128480194602098, 0.7821684431180708, 0.4321472685365301,
		0.4321472685365301, 0.4321472685365301, 0.7821684431180708, -0.12128480194602098,
		0.37968289875261624, 0.37968289875261624, 0.753341017856078, 0.37968289875261624,
		0.03381941603233842, 0.9982828964265062, 0.03381941603233842, 0.03381941603233842,
		-0.044802370851755174, 0.8586508742123365, -0.044802370851755174, 0.508629699630796,
		-0.044802370851755174, 0.8586508742123365, 0.508629699630796, -0.044802370851755174,
		-0.12128480194602098, 0.7821684431180708, 0.4321472685365301, 0.4321472685365301,
		0.508629699630796, 0.8586508742123365, -0.044802370851755174, -0.044802370851755174,
		0.4321472685365301, 0.7821684431180708, -0.12128480194602098, 0.4321472685365301,
		0.4321472685365301, 0.7821684431180708, 0.4321472685365301, -0.12128480194602098,
		0.37968289875261624, 0.753341017856078, 0.37968289875261624, 0.37968289875261624,
		0.9982828964265062, 0.03381941603233842, 0.03381941603233842, 0.03381941603233842,
		0.8586508742123365, -0.044802370851755174, -0.044802370851755174, 0.508629699630796,
		0.8586508742123365, -0.044802370851755174, 0.508629699630796, -0.044802370851755174,
		0.7821684431180708, -0.12128480194602098, 0.4321472685365301, 0.4321472685365301,
		0.8586508742123365, 0.508629699630796, -0.044802370851755174, -0.044802370851755174,
		0.7821684431180708, 0.4321472685365301, -0.12128480194602098, 0.4321472685365301,
		0.7821684431180708, 0.4321472685365301, 0.4321472685365301, -0.12128480194602098,
		0.753341017856078, 0.37968289875261624, 0.37968289875261624, 0.37968289875261624,
	}
	n4 := len(o.grads4)
	for i := 0; i < n4; i++ {
		o.grads4[i] /= Normalizer4d
	}
	for i := 0; i < len(o.gradients4d); i++ {
		o.gradients4d[i] = o.grads4[i%n4]
	}
}

func NewOpenSimplex2(seed int64) *Simplex {
	var simplex Simplex
	simplex.Init(seed)
	return &simplex
}

// 2D

// Noise2D generates 2D Simplex noise with standard lattice orientation.
func (o Simplex) Noise2D(x, y float64) float64 {
	s := Skew2d * (x + y)
	xs := x + s
	ys := y + s
	return o.noise2UnskewedBase(xs, ys)
}

// Noise2DImproveX generates 2D Simplex noise with Y pointing down the main diagonal.
func (o Simplex) Noise2DImproveX(x, y float64) float64 {
	xx := x * ROOT2OVER2
	yy := y * (ROOT2OVER2 * (1 + 2*Skew2d))
	return o.noise2UnskewedBase(xx+yy, yy-xx)
}

// noise2UnskewedBase is the base function for 2D Simplex noise
func (o Simplex) noise2UnskewedBase(x, y float64) float64 {
	// Get base points and offsets.
	xInt, xFrac := math.Modf(x)
	yInt, yFrac := math.Modf(y)

	// Prime pre-multiplication for hash.
	xsbp := int64(xInt) * PrimeX
	ysbp := int64(yInt) * PrimeY

	// Unskew
	t := (xFrac + yFrac) * Unskew2d
	dx0 := xFrac + t
	dy0 := yFrac + t

	// First vertex
	var value float64
	a0 := Rsquared2d - dx0*dx0 - dy0*dy0
	if a0 > 0 {
		value = a0 * a0 * a0 * a0 * o.grad2D(xsbp, ysbp, dx0, dy0)
	}

	// Second vertex
	a1 := (2*(1+2*Unskew2d)*(1/Unskew2d+2))*t + ((-2 * (1 + 2*Unskew2d) * (1 + 2*Unskew2d)) + a0)
	if a1 > 0 {
		dx := dx0 - (1 + 2*Unskew2d)
		dy := dy0 - (1 + 2*Unskew2d)
		value += a1 * a1 * a1 * a1 * o.grad2D(xsbp+PrimeX, ysbp+PrimeY, dx, dy)
	}

	// Third vertex
	if dy0 > dx0 {
		dx2 := dx0 - Unskew2d
		dy2 := dy0 - Unskew2d + 1
		a2 := Rsquared2d - dx2*dx2 - dy2*dy2
		if a2 > 0 {
			value += a2 * a2 * a2 * a2 * o.grad2D(xsbp, ysbp+PrimeY, dx2, dy2)
		}
	} else {
		dx2 := dx0 - Unskew2d + 1
		dy2 := dy0 - Unskew2d
		a2 := Rsquared2d - dx2*dx2 - dy2*dy2
		if a2 > 0 {
			value += a2 * a2 * a2 * a2 * o.grad2D(xsbp+PrimeX, ysbp, dx2, dy2)
		}
	}
	return value
}

// 3D

// Picked a default, see various implementations below
func (o Simplex) Noise3D(x, y, z float64) float64 {
	return o.Noise3DImproveXY(x, y, z)
}

/**
 * 3D Simplex noise, with better visual isotropy in (X, Y).
 * Recommended for 3D terrain and time-varied animations.
 * The Z coordinate should always be the "different" coordinate in whatever your use case is.
 * If Y is vertical in world coordinates, call noise3_ImproveXZ(x, z, Y) or use noise3_XZBeforeY.
 * If Z is vertical in world coordinates, call noise3_ImproveXZ(x, y, Z).
 * For a time varied animation, call noise3_ImproveXY(x, y, T).
 */
func (o Simplex) Noise3DImproveXY(x, y, z float64) float64 {
	// Re-orient the cubic lattices without skewing, so Z points up the main lattice diagonal,
	// and the planes formed by XY are moved far out of alignment with the cube faces.
	// Orthonormal rotation. Not a skew transform.
	xy := x + y
	s2 := xy * Rotate3dOrthogonalizer
	zz := z * ROOT3OVER3
	xr := x + s2 + zz
	yr := y + s2 + zz
	zr := xy*-ROOT3OVER3 + zz

	// Evaluate both lattices to form a BCC lattice.
	return o.noise3UnrotatedBase(xr, yr, zr)
}

/**
 * 3D Simplex noise, with better visual isotropy in (X, Z).
 * Recommended for 3D terrain and time-varied animations.
 * The Y coordinate should always be the "different" coordinate in whatever your use case is.
 * If Y is vertical in world coordinates, call noise3_ImproveXZ(x, Y, z).
 * If Z is vertical in world coordinates, call noise3_ImproveXZ(x, Z, y) or use noise3_ImproveXY.
 * For a time varied animation, call noise3_ImproveXZ(x, T, y) or use noise3_ImproveXY.
 */
func (o Simplex) Noise3DImproveXZ(x, y, z float64) float64 {
	// Re-orient the cubic lattices without skewing, so Y points up the main lattice diagonal,
	// and the planes formed by XZ are moved far out of alignment with the cube faces.
	// Orthonormal rotation. Not a skew transform.
	xz := x + z
	s2 := xz * Rotate3dOrthogonalizer
	yy := y * ROOT3OVER3
	xr := x + s2 + yy
	yr := xz*-ROOT3OVER3 + yy
	zr := z + s2 + yy

	// Evaluate both lattices to form a BCC lattice.
	return o.noise3UnrotatedBase(xr, yr, zr)
}

/**
 * 3D Simplex noise, fallback rotation option
 * Use noise3_ImproveXY or noise3_ImproveXZ instead, wherever appropriate.
 * They have less diagonal bias. This function's best use is as a fallback.
 */
func (o Simplex) Noise3DFallback(x, y, z float64) float64 {
	// Re-orient the cubic lattices via rotation, to produce a familiar look.
	// Orthonormal rotation. Not a skew transform.
	r := FallbackRotate3d * (x + y + z)
	xr := r - x
	yr := r - y
	zr := r - z

	// Evaluate both lattices to form a BCC lattice.
	return o.noise3UnrotatedBase(xr, yr, zr)
}

func (o Simplex) noise3UnrotatedBase(xr float64, yr float64, zr float64) float64 {
	// Get base points and offsets.
	xrb := fastRound(xr)
	yrb := fastRound(yr)
	zrb := fastRound(zr)
	xri := xr - float64(xrb)
	yri := yr - float64(yrb)
	zri := zr - float64(zrb)

	// -1 if positive, 1 if negative
	xNSign := int64(-1-xri) | 1
	yNSign := int64(-1-yri) | 1
	zNSign := int64(-1-zri) | 1

	// Compute absolute values, using the above as a shortcut
	ax0 := float64(xNSign) * -xri
	ay0 := float64(yNSign) * -yri
	az0 := float64(zNSign) * -zri

	// Prime pre-multiplication for hash.
	xrbp := xrb * PrimeX
	yrbp := yrb * PrimeY
	zrbp := zrb * PrimeZ

	// Loop: Pick an edge on each lattice copy.
	value := 0.0
	a := (Rsquared3d - xri*xri) - (yri*yri + zri*zri)
	for l := 0; ; l++ {
		if a > 0 {
			value += a * a * a * a * o.grad3D(xrbp, yrbp, zrbp, xri, yri, zri)
		}
		if ax0 >= ay0 && ax0 >= az0 {
			b := a + ax0 + ax0
			if b > 1 {
				b--
				value += b * b * b * b * o.grad3D(xrbp-xNSign*PrimeX, yrbp, zrbp, xri+float64(xNSign), yri, zri)
			}
		} else if ay0 > ax0 && ay0 >= az0 {
			b := a + ay0 + ay0
			if b > 1 {
				b--
				value += b * b * b * b * o.grad3D(xrbp, yrbp-yNSign*PrimeY, zrbp, xri, yri+float64(yNSign), zri)
			}
		} else {
			b := a + az0 + az0
			if b > 1 {
				b--
				value += b * b * b * b * o.grad3D(xrbp, yrbp, zrbp-zNSign*PrimeZ, xri, yri, zri+float64(zNSign))
			}
		}

		// Break from loop if we're done, skipping updates below.
		if l == 1 {
			break
		}

		// Update absolute value.
		ax0 = 0.5 - ax0
		ay0 = 0.5 - ay0
		az0 = 0.5 - az0

		// Update relative coordinate.
		xri = float64(xNSign) * ax0
		yri = float64(yNSign) * ay0
		zri = float64(zNSign) * az0

		// Update falloff
		a += (0.75 - ax0) - (ay0 + az0)

		// Update prime for hash.
		xrbp += (xNSign >> 1) & PrimeX
		yrbp += (yNSign >> 1) & PrimeY
		zrbp += (zNSign >> 1) & PrimeZ

		// Update the reverse sign indicators.
		xNSign = -xNSign
		yNSign = -yNSign
		zNSign = -zNSign
		// Update the seed for the other lattice copy.
		o.seed ^= SeedFlip3d
	}

	return value
}

// 4D

// Picked a default, see various implementations below
func (o Simplex) Noise4D(x, y, z, w float64) float64 {
	return o.Noise4DImproveXYZImproveXZ(x, y, z, w)
}

/**
 * 4D Simplex noise, with XYZ oriented like noise3_ImproveXY
 * and W for an extra degree of freedom. W repeats eventually.
 * Recommended for time-varied animations which texture a 3D object (W=time)
 * in a space where Z is vertical
 */
func (o Simplex) Noise4DImproveXYZImproveXY(x, y, z, w float64) float64 {
	xy := x + y
	s2 := xy * -0.21132486540518699998
	zz := z * 0.28867513459481294226
	ww := w * 0.2236067977499788
	xr := x + s2 + zz + ww
	yr := y + s2 + zz + ww
	zr := xy*-0.57735026918962599998 + zz + ww
	wr := z*-0.866025403784439 + ww

	return o.noise4UnskewedBase(xr, yr, zr, wr)
}

/**
 * 4D Simplex noise, with XYZ oriented like noise3_ImproveXZ
 * and W for an extra degree of freedom. W repeats eventually.
 * Recommended for time-varied animations which texture a 3D object (W=time)
 * in a space where Y is vertical
 */
func (o Simplex) Noise4DImproveXYZImproveXZ(x, y, z, w float64) float64 {
	xz := x + z
	s2 := xz * -0.21132486540518699998
	yy := y * 0.28867513459481294226
	ww := w * 0.2236067977499788
	xr := x + yy + ww + s2
	yr := xz*-0.57735026918962599998 + yy + ww
	zr := z + yy + ww + s2
	wr := y*-0.866025403784439 + ww

	return o.noise4UnskewedBase(xr, yr, zr, wr)
}

/**
 * 4D Simplex noise, with XYZ oriented like noise3_Fallback
 * and W for an extra degree of freedom. W repeats eventually.
 * Recommended for time-varied animations which texture a 3D object (W=time)
 * where there isn't a clear distinction between horizontal and vertical
 */
func (o Simplex) Noise4DImproveXYZ(x, y, z, w float64) float64 {
	xyz := x + y + z
	ww := w * 0.2236067977499788
	s2 := xyz*-0.16666666666666666 + ww
	xs := x + s2
	ys := y + s2
	zs := z + s2
	ws := -0.5*xyz + ww

	return o.noise4UnskewedBase(xs, ys, zs, ws)
}

/**
 * 4D Simplex noise, with XY and ZW forming orthogonal triangular-based planes.
 * Recommended for 3D terrain, where X and Y (or Z and W) are horizontal.
 * Recommended for noise(x, y, sin(time), cos(time)) trick.
 */
func (o Simplex) Noise4DImproveXZImproveZW(x, y, z, w float64) float64 {
	s2 := (x+y)*-0.178275657951399372 + (z+w)*0.215623393288842828
	t2 := (z+w)*-0.403949762580207112 + (x+y)*-0.375199083010075342
	xs := x + s2
	ys := y + s2
	zs := z + t2
	ws := w + t2

	return o.noise4UnskewedBase(xs, ys, zs, ws)
}

// 4D Simplex noise, fallback lattice orientation.
func (o Simplex) Noise4DFallback(x, y, z, w float64) float64 {
	// Get points for A4 lattice
	s := Skew4d * (x + y + z + w)
	xs := x + s
	ys := y + s
	zs := z + s
	ws := w + s

	return o.noise4UnskewedBase(xs, ys, zs, ws)
}

func (o Simplex) noise4UnskewedBase(x, y, z, w float64) float64 {
	// Get base points and offsets.
	xInt, xFrac := math.Modf(x)
	yInt, yFrac := math.Modf(y)
	zInt, zFrac := math.Modf(z)
	wInt, wFrac := math.Modf(w)

	// Determine which lattice we can be confident has a contributing point its corresponding cell's base simplex.
	// We only look at the spaces between the diagonal planes.
	fracSum := xFrac + yFrac + zFrac + wFrac
	startingLattice := int64(fracSum * 1.25)

	// Offset for seed based on first lattice copy.
	o.seed += startingLattice * SeedOffset4d

	// Offset for lattice point relative positions (skewed)
	startingLatticeOffset := float64(startingLattice) * -LatticeStep4d
	xFrac += startingLatticeOffset
	yFrac += startingLatticeOffset
	zFrac += startingLatticeOffset
	wFrac += startingLatticeOffset

	// Prep for vertex contributions.
	ssi := (fracSum + startingLatticeOffset*4) * Unskew4d

	// Prime pre-multiplication for hash.
	xsvp := int64(xInt) * PrimeX
	ysvp := int64(yInt) * PrimeY
	zsvp := int64(zInt) * PrimeZ
	wsvp := int64(wInt) * PrimeW

	// Five points to add, total, from five copies of the A4 lattice.
	var value float64
	for i := 0; ; i++ {

		// Next point is the closest vertex on the 4-simplex whose base vertex is the aforementioned vertex.
		score0 := 1.0 + ssi*(-1.0/Unskew4d)
		if xFrac >= yFrac && xFrac >= zFrac && xFrac >= wFrac && xFrac >= score0 {
			xsvp += PrimeX
			xFrac -= 1.0
			ssi -= Unskew4d
		} else if yFrac >= xFrac && yFrac >= zFrac && yFrac >= wFrac && yFrac >= score0 {
			ysvp += PrimeY
			yFrac -= 1.0
			ssi -= Unskew4d
		} else if zFrac >= xFrac && zFrac >= yFrac && zFrac >= wFrac && zFrac >= score0 {
			zsvp += PrimeZ
			zFrac -= 1.0
			ssi -= Unskew4d
		} else if wFrac >= xFrac && wFrac >= yFrac && wFrac >= zFrac && wFrac >= score0 {
			wsvp += PrimeW
			wFrac -= 1.0
			ssi -= Unskew4d
		}

		// gradient contribution with falloff.
		dx := xFrac + ssi
		dy := yFrac + ssi
		dz := zFrac + ssi
		dw := wFrac + ssi
		a := dx*dx + dy*dy + dz*dz + dw*dw
		if a < Rsquared4d {
			a -= Rsquared4d
			a *= a
			value += a * a * o.grad4D(xsvp, ysvp, zsvp, wsvp, dx, dy, dz, dw)
		}

		// Break from loop if we're done, skipping updates below.
		if i == 4 {
			break
		}

		// Update for next lattice copy shifted down by <-0.2, -0.2, -0.2, -0.2>.
		xFrac += LatticeStep4d
		yFrac += LatticeStep4d
		zFrac += LatticeStep4d
		wFrac += LatticeStep4d
		ssi += LatticeStep4d * 4 * Unskew4d
		o.seed -= SeedOffset4d

		// Because we don't always start on the same lattice copy, there's a special reset case.
		if int64(i) == startingLattice {
			xsvp -= PrimeX
			ysvp -= PrimeY
			zsvp -= PrimeZ
			wsvp -= PrimeW
			o.seed += SeedOffset4d * 5
		}
	}
	return value
}

func (o Simplex) grad2D(xsvp int64, ysvp int64, dx0 float64, dy0 float64) float64 {
	hash := o.seed ^ xsvp ^ ysvp
	hash *= HashMultiplier
	hash ^= hash >> (64 - NGrads2dExponent + 1)
	gi := hash & ((NGrads2d - 1) << 1)
	return o.gradients2d[gi|0]*dx0 + o.gradients2d[gi|1]*dy0
}

func (o Simplex) grad3D(xsvp int64, ysvp int64, zsvp int64, dx0 float64, dy0 float64, dz0 float64) float64 {
	hash := (o.seed ^ xsvp) ^ (ysvp ^ zsvp)
	hash *= HashMultiplier
	hash ^= hash >> (64 - NGrads3dExponent + 2)
	gi := hash & ((NGrads3d - 1) << 2)
	return o.gradients3d[gi|0]*dx0 + o.gradients3d[gi|1]*dy0 + o.gradients3d[gi|2]*dz0
}

func (o Simplex) grad4D(xsvp int64, ysvp int64, zsvp int64, wsvp int64, dx0 float64, dy0 float64, dz0 float64, dw0 float64) float64 {
	hash := o.seed ^ (xsvp ^ ysvp) ^ (zsvp ^ wsvp)
	hash *= HashMultiplier
	hash ^= hash >> (64 - NGrads4dExponent + 2)
	gi := hash & ((NGrads4d - 1) << 2)
	return o.gradients4d[gi|0]*dx0 + o.gradients4d[gi|1]*dy0 + o.gradients4d[gi|2]*dz0 + o.gradients4d[gi|3]*dw0
}

// Utility functions

func fastRound(x float64) int64 {
	if x < 0 {
		return int64(x - 0.5)
	}
	return int64(x + 0.5)
}
